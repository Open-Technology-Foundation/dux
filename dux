#!/bin/bash
set -euo pipefail

# Function to recursively print directory structure and sizes
du_tree() {
  local PRG0=$(readlink -fn -- "$0")
  local PRGDIR=$(dirname "$PRG0")
  local PRG=$(basename "$PRG0")
  local AUTHOR='Gary Dean, garydean@okusi.id'
  local VERSION='0.0.3'

  local DU=$(command -v du || echo '')
  if [[ -z "$DU" ]]; then
    echo >&2 'Program `du` was not found!'
    return 22
  fi
  local -a aDir=()
  local -a aDuOpts=()
  local -i max_recurse=0 recurse_level=0
  local number_format='nosep' #sep|nosep*
  local -i total_dir_size=0 size=0
  local dir_root=""
  
  # Enable sorting
  local sort_output="no"
  local sort_opts="-n"

  du_tree.help() {
    cat <<-EOT
$PRG vs ${VERSION}
    
Wrapper script for 'du' (disk usage) that provides enhanced features.

Usage: $PRG [-sNV] [-r maxrecurse] [-f format] [-R rootdir] [-S] [du-options...] dir...
 
OPTIONS:
-r|--max_recurse int
              Maximum recursion depth (use -1 for unlimited, max 99).
              Currently '$max_recurse'.
-s|--sep      Use number separator character in size display.
-N|--nosep    Do not use number separator character in size display.
              Currently '--$number_format'.
-f|--number_format format
              Set number format to 'sep' or 'nosep'.
-R|--dir_root directory
              Set the root directory for output.
-S|--sort     Sort output by size (ascending).
-V|--version  Version info ($VERSION)
-h|--help     Display this help message.
--            Consider all following arguments to be directories 
              and stop processing further arguments/options.
--du          Consider all following arguments to be 'du' ($DU)
              options and stop processing further arguments/options.

EXAMPLES:
  $PRG                     # Show sizes for current directory
  $PRG -r 2 /home          # Recurse 2 levels into /home
  $PRG -s -S /var          # Show sorted sizes with separators
  $PRG --du -h /usr        # Pass -h to du for human-readable sizes

OUTPUT FORMAT:
  <size> <level> <path> [<symlink-indicator>]
  Where:
  - <size> is the directory size in bytes
  - <level> is the recursion level (0 for top level)
  - <path> is the directory path
  - <symlink-indicator> is * for symlinks

EOT
  }
  
  while (($#)); do case $1 in
    --recurse_level)
                  shift; recurse_level=$1 ;;
    -r|--max_recurse)  
                  shift; max_recurse=${1:-0}
                  ((max_recurse == -1)) && max_recurse=99 ;;
    -s|--sep)     number_format=sep ;;
    -N|--nosep)   number_format=nosep ;;
    -f|--number_format)
                  shift
                  [[ ${1,,} == 'sep' ]] && number_format=sep || number_format=nosep
                  ;;
    -R|--dir_root)
                  shift; dir_root="$1" ;;
    -S|--sort)    sort_output="yes" ;;
    -V|--version) echo "$PRG vs ${VERSION}"; return 0 ;;
    -h|--help)    du_tree.help; return 0 ;;
    --)           shift; aDir+=( "$@" );  break ;;
    --du)         shift; aDuOpts+=( "$@" ); break ;;
    -[rsNfRSVh]*)  #shellcheck disable=SC2046 # expand aggregated short options
                  set -- '' $(printf -- "-%c " $(grep -o . <<<"${1:1}")) "${@:2}" ;;
    -*)           aDuOpts+=( "$1" ) ;;
    *)            aDir+=( "$1" ) ;;
  esac; shift; done

  # Set default directory if none specified
  ((${#aDir[@]})) || aDir[0]=$PWD
  
  # Set default root directory if not specified
  [[ -z "$dir_root" && recurse_level -eq 0 ]] && dir_root=${aDir[0]}
  
  # Temporary file for sorting if needed
  local tmp_output=""
  if [[ "$sort_output" == "yes" ]]; then
    tmp_output=$(mktemp)
    trap 'rm -f "$tmp_output"' EXIT
  fi

  # Process each directory
  for dir in "${aDir[@]}"; do
    # Check if directory exists
    if [[ ! -d "$dir" ]]; then
      echo >&2 "Error: Directory '$dir' does not exist or is not accessible"
      continue
    fi
    
    total_dir_size=0
    
    # Use nullglob to handle case when no files exist
    shopt -s nullglob
    for item in "${dir}"/*; do
      # If the item is a directory
      if [[ -d "$item" ]] && [[ ! -L "$item" ]]; then
        # Calculate directory size
        size=$(( $( (${DU} --no-dereference -bs --exclude="*proc/*" --exclude="*run/*" "${aDuOpts[@]}" "$item" | cut -f1) || echo 0) ))
        total_dir_size+=$size
        [[ -L "$item" ]] && filestat='*' || filestat=''
        
        # Print directory size
        if [[ "$sort_output" == "yes" ]]; then
          printf "%15d %d %s %s\n" "$size" "$recurse_level" "${item//\/\//\/}" "$filestat" >> "$tmp_output"
        else
          printf "%15d %d %s %s\n" "$size" "$recurse_level" "${item//\/\//\/}" "$filestat"
        fi
        
        # Recursively print subdirectories
        if ((recurse_level < max_recurse)); then
          ((recurse_level++))
          du_tree "$item" \
              --recurse_level "${recurse_level}" \
              --max_recurse "${max_recurse}" \
              --number_format "${number_format}" \
              --dir_root "${dir_root}"
          ((recurse_level--))
        fi
      fi
    done
    shopt -u nullglob
    
    # Print total size for the root directory
    if (( recurse_level == 0 )); then
      if [[ "$sort_output" == "yes" ]]; then
        printf "%15d %d %s\n" "$total_dir_size" "$recurse_level" "${dir_root//\/\//\/}" >> "$tmp_output"
      else
        printf "%15d %d %s\n" "$total_dir_size" "$recurse_level" "${dir_root//\/\//\/}"
      fi
    fi
  done
  
  # Output sorted results if requested
  if [[ "$sort_output" == "yes" && -f "$tmp_output" ]]; then
    sort $sort_opts "$tmp_output"
    rm -f "$tmp_output"
    trap - EXIT
  fi
}

# Set locale for number formatting if separator is used
if [[ "${LC_NUMERIC:-}" != "en_US.UTF-8" ]]; then
  export LC_NUMERIC="en_US.UTF-8"
fi

du_tree "$@"
#fin